AWSTemplateFormatVersion: '2010-09-09'
Description: Validation Api

Parameters:
  apiGatewayName:
    Type: String
    Default: validation-api-2  
  orderProcessFunctionName:
    Type: String
    Default: order-processing-lambda-2

# Ressourcen
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_ApiGateway.html

Resources:  
  validationApi:        
    Type: AWS::ApiGateway::RestApi
    Properties:
      Tags:
        - Key: project
          Value: api-gateway-course
        - Key: created
          Value: generated
      Description: Api mit Validierung von Anfragen
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName

  orderProcessResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt validationApi.RootResourceId
      PathPart: order
      RestApiId: !Ref validationApi

  orderMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref orderProcessResource
      RestApiId: !Ref validationApi
      AuthorizationType: NONE
      HttpMethod: POST   
      RequestValidatorId: !Ref requestValidator
      RequestModels:
          "application/json": "Order" 
      MethodResponses:
        - StatusCode: '200'
          ResponseModels: 
            "application/json": "Result"
        - StatusCode: '404'
          ResponseModels: 
            "application/json": "MyError"
      Integration:        
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${orderProcessFunction.Arn}/invocations"            
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'            
            ResponseTemplates:            
              'application/json': ''                
    DependsOn: orderProcessFunction

  requestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties: 
      Name: Validator
      RestApiId: !Ref validationApi
      ValidateRequestBody: true
      ValidateRequestParameters: true

  apiDeployment:
    Type: AWS::ApiGateway::Deployment    
    DependsOn:
      - orderMethod  
    Properties:
      RestApiId: !Ref validationApi
      StageName: develop
      Description: Version 1.0      

  orderLambdaRole:
    Type: AWS::IAM::Role
    Properties:      
      Tags:
        - Key: project
          Value: api-gateway-course
        - Key: created
          Value: generated
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  orderModel:
    Type: AWS::ApiGateway::Model
    Properties: 
      ContentType: application/json
      Description: Order Model
      Name: Order
      RestApiId: !Ref validationApi
      Schema: 
        "$schema": http://json-schema.org/draft-04/schema#
        type: object
        properties:
          firstName:
            type: string
          lastName:
            type: string
          city:
            type: string
          zipCode:
            type: integer
          street:
            type: string
          position:
            type: object
            properties:
              itemNumber:
                type: integer
              quantity:
                type: integer
            required:
            - itemNumber
            - quantity
        required:
        - firstName
        - lastName
        - city
        - zipCode
        - street

  resultModel:
    Type: AWS::ApiGateway::Model
    Properties: 
      ContentType: application/json
      Description: Result Model
      Name: Result
      RestApiId: !Ref validationApi
      Schema: 
        "$schema": http://json-schema.org/draft-04/schema#
        type: object
        properties:
          result:
            type: string
        required:
        - result
      
  errorModel:
    Type: AWS::ApiGateway::Model
    Properties: 
      ContentType: application/json
      Description: MyError Model
      Name: MyError
      RestApiId: !Ref validationApi
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#
        type: object
        properties:
          error:
            type: string
        required:
        - error


  # https://docs.aws.amazon.com/de_de/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
  orderProcessFunction:
    Type: AWS::Lambda::Function    
    Properties:
      FunctionName: !Ref orderProcessFunctionName
      Role: !GetAtt orderLambdaRole.Arn
      Runtime: nodejs14.x
      Handler: index.handler            
      Tags:
        - Key: project
          Value: api-gateway-course
        - Key: created
          Value: generated
      Code:
        ZipFile: |
          exports.handler = async (event) => { 
            console.log("request: " + JSON.stringify(event));
            const body = JSON.parse(event.body);
            try {
              let itemNumber = body.position.itemNumber;
              if (itemNumber > 300) {
                return buildErrorResponse(404, "Item "+itemNumber+ " not found.");  
              }              
              let quantity = body.position.quantity;
              return buildSuccessResponse(200, quantity+" Item(s) successfully ordered")              
            } catch(ex) {
              return buildErrorResponse(500, "Unknown error");
            }
          }            
          function buildSuccessResponse(statusCode, successMessage) {
            return buildProxyResponse(statusCode, {result: successMessage});
          }
          function buildErrorResponse(statusCode, errorMessage) {
            return buildProxyResponse(statusCode, {error: errorMessage});
          }
          function buildProxyResponse(statusCode, responseBody) {
            return {
                statusCode: statusCode,
                headers: {},
                body: JSON.stringify(responseBody)
              };              
          }
    DependsOn: orderLambdaRole

  accessToApiPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction     
      FunctionName: !Ref orderProcessFunctionName
      Principal: apigateway.amazonaws.com            
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${validationApi}/*
    DependsOn:
      - orderMethod
      - orderProcessFunction

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${validationApi}.execute-api.${AWS::Region}.amazonaws.com/develop