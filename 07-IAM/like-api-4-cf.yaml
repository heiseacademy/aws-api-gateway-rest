AWSTemplateFormatVersion: '2010-09-09'
Description: Like API Beispiel (Mag ich, mag ich nicht)

# Cloudformation - Getting started
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/gettingstarted.templatebasics.html

Parameters:
  apiGatewayName:
    Type: String
    Default: like-api
  likeFunctionName:
    Type: String
    Default: like-api-lambda
  dynamoDbTableName:
    Type: String
    Default: LikeApiTable
  customDynamoAccessPolicyName:
    Type: String
    Default: CustomDynamoAccessPolicy
  customCloudWatchAccessPolicyName:
    Type: String
    Default: CustomCloudWatchAccessPolicy
  customApiGatewayCloudWatchRole:
    Type: String
    Default: CustomApiGwCloudWatchRole
  customBucketAccessPolicyName:
    Type: String
    Default: CustomS3BucketAccessPolicy  
  accessControlAllowOrigin:
    Type: String
    Default: "*"
  indexHtmlBucketName:
    Type: String
    Description: "Der Name des Buckets in dem die ui-final.html Datei abgelegt ist"


# Ressourcen
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_ApiGateway.html

Resources:  
  likeApi:        
    Type: AWS::ApiGateway::RestApi
    Properties:
      Tags:
        - Key: project
          Value: api-gateway-course
        - Key: created
          Value: generated
      Description: Like Api
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName

  # Für alle API Gateways in der gleichen Region
  apiGwCloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Tags:
        - Key: project
          Value: api-gateway-course
        - Key: created
          Value: generated
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  # Für alle API Gateways in der gleichen Region
  apiAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt apiGwCloudWatchRole.Arn

  rootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !GetAtt likeApi.RootResourceId
      RestApiId: !Ref likeApi
      AuthorizationType: NONE
      HttpMethod: GET          
      MethodResponses:
        - StatusCode: '200'                
          ResponseModels: { "text/html": "Empty" } 
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:        
        Type: AWS
        Credentials: !GetAtt customBucketAccessRole.Arn
        # Nach Region folgt SERVICE_NAME:action/ACTION_NAME&Var1=Value1&Var2=Value2, alternativ für S3 mit path/...
        Uri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:s3:path/${indexHtmlBucketName}/ui-final.html'
        IntegrationHttpMethod: GET      
        IntegrationResponses:
          - StatusCode: '200'   
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${accessControlAllowOrigin}'"         
            ResponseTemplates:                        
              'text/html': ''
        RequestTemplates:
          'application/json': '{"statusCode": 200}'        
        
  customBucketAccessRole:
    Type: AWS::IAM::Role
    Properties:            
      Tags:
          - Key: project
            Value: api-gateway-course
          - Key: created
            Value: generated
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole

  customBucketAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:      
      PolicyName: !Ref customBucketAccessPolicyName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action: 's3:GetS3Object'
          Resource: !Sub "arn:aws:s3:::${indexHtmlBucketName}/ui-final.html"
      Roles:
        - !Ref customBucketAccessRole

  rootOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !GetAtt likeApi.RootResourceId
      RestApiId: !Ref likeApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS           
      MethodResponses:
        - StatusCode: '200'
          ResponseModels: { "application/json": "Empty" } 
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:        
        Type: MOCK
        IntegrationHttpMethod: GET 
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${accessControlAllowOrigin}'"             
            ResponseTemplates:            
              'application/json': ''
        RequestTemplates:
          'application/json': '{"statusCode": 200}'

  ilikeItResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt likeApi.RootResourceId
      PathPart: ilikeit
      RestApiId: !Ref likeApi

  likePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref ilikeItResource
      RestApiId: !Ref likeApi
      AuthorizationType: NONE
      HttpMethod: POST           
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:        
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${likeLambdaFunction.Arn}/invocations"            
        IntegrationHttpMethod: POST
        PassthroughBehavior: NEVER
        RequestTemplates:
          "application/json": '{"action":"like"}'     
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${accessControlAllowOrigin}'"             
            ResponseTemplates:            
              'application/json': ''
    DependsOn: likeLambdaFunction

  likeOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref ilikeItResource
      RestApiId: !Ref likeApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS           
      MethodResponses:
        - StatusCode: '200'
          ResponseModels: { "application/json": "Empty" } 
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:        
        Type: MOCK
        IntegrationHttpMethod: GET
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${accessControlAllowOrigin}'"             
            ResponseTemplates:            
              'application/json': ''
        RequestTemplates:
          'application/json': '{"statusCode": 200}'
    DependsOn: likePostMethod

  iDontLikeItResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt likeApi.RootResourceId
      PathPart: idontlikeit
      RestApiId: !Ref likeApi

  dislikePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref iDontLikeItResource
      RestApiId: !Ref likeApi
      AuthorizationType: NONE
      HttpMethod: POST           
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:        
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${likeLambdaFunction.Arn}/invocations"            
        IntegrationHttpMethod: POST
        PassthroughBehavior: NEVER
        RequestTemplates:
          "application/json": '{"action":"dislike"}'     
        IntegrationResponses:
          - StatusCode: '200'  
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${accessControlAllowOrigin}'"           
            ResponseTemplates:            
              'application/json': ''
    DependsOn: likeLambdaFunction

  dislikeOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref iDontLikeItResource
      RestApiId: !Ref likeApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS           
      MethodResponses:
        - StatusCode: '200'
          ResponseModels: { "application/json": "Empty" } 
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:        
        Type: MOCK
        IntegrationHttpMethod: GET
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${accessControlAllowOrigin}'"             
            ResponseTemplates:            
              'application/json': ''
        RequestTemplates:
          'application/json': '{"statusCode": 200}'
    DependsOn: dislikePostMethod

  textResultResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt likeApi.RootResourceId
      PathPart: textresult
      RestApiId: !Ref likeApi

  textResultPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref textResultResource
      RestApiId: !Ref likeApi
      AuthorizationType: NONE
      HttpMethod: GET           
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:        
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${likeLambdaFunction.Arn}/invocations"            
        IntegrationHttpMethod: POST
        PassthroughBehavior: NEVER
        RequestTemplates:
          "application/json": '{}'
        IntegrationResponses:
          - StatusCode: '200'    
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${accessControlAllowOrigin}'"         
            ResponseTemplates:            
              'application/json': "#set($inputRoot = $input.path('$'))\n $inputRoot.like Benutzer(n) gefällt das.\n $inputRoot.dislike Benutzer(n) gefällt das nicht."
    DependsOn: likeLambdaFunction

  textResultOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref textResultResource
      RestApiId: !Ref likeApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS           
      MethodResponses:
        - StatusCode: '200'
          ResponseModels: { "application/json": "Empty" } 
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:        
        Type: MOCK
        IntegrationHttpMethod: GET
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${accessControlAllowOrigin}'"             
            ResponseTemplates:            
              'application/json': ''
        RequestTemplates:
          'application/json': '{"statusCode": 200}'
    DependsOn: textResultPostMethod

  voteResultResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt likeApi.RootResourceId
      PathPart: voteresult
      RestApiId: !Ref likeApi
  
  voteResultMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref voteResultResource
      RestApiId: !Ref likeApi
      AuthorizationType: NONE
      HttpMethod: GET           
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:        
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${likeLambdaFunction.Arn}/invocations"            
        IntegrationHttpMethod: POST
        PassthroughBehavior: NEVER
        RequestTemplates:
          "application/json": '{}'     
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${accessControlAllowOrigin}'"             
            ResponseTemplates:            
              'application/json': ''
    DependsOn: likeLambdaFunction

  voteResultOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref voteResultResource
      RestApiId: !Ref likeApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS           
      MethodResponses:
        - StatusCode: '200'
          ResponseModels: { "application/json": "Empty" } 
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:        
        Type: MOCK
        IntegrationHttpMethod: GET
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${accessControlAllowOrigin}'"             
            ResponseTemplates:            
              'application/json': ''
        RequestTemplates:
          'application/json': '{"statusCode": 200}'
    DependsOn: voteResultMethod

  apiDeployment:
    Type: AWS::ApiGateway::Deployment    
    DependsOn:
      - textResultResource
      - ilikeItResource  
      - iDontLikeItResource    
      - voteResultResource
      - rootOptionsMethod 
      - likeOptionsMethod
      - dislikeOptionsMethod
      - voteResultOptionsMethod
      - textResultOptionsMethod
    Properties:
      RestApiId: !Ref likeApi
      StageName: develop
      Description: Version 1.0  
      StageDescription: 
        LoggingLevel: INFO
  
  dynamoAccessLambdaRole:
    Type: AWS::IAM::Role
    Properties:            
      Tags:
          - Key: project
            Value: api-gateway-course
          - Key: created
            Value: generated
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  dynamoAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref customDynamoAccessPolicyName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action: '*'
          Resource: !GetAtt likeTable.Arn
      Roles:
        - !Ref dynamoAccessLambdaRole

  cloudWatchAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref customCloudWatchAccessPolicyName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action: 
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
          Resource: "*"
      Roles:
        - !Ref dynamoAccessLambdaRole


  # https://docs.aws.amazon.com/de_de/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
  likeLambdaFunction:
    Type: AWS::Lambda::Function    
    Properties:
      FunctionName: !Ref likeFunctionName      
      Role: !GetAtt dynamoAccessLambdaRole.Arn
      Runtime: nodejs14.x
      Handler: index.handler            
      Tags:
        - Key: project
          Value: api-gateway-course
        - Key: created
          Value: generated
      Code:
        ZipFile: !Sub |
          /*
            Possible Events
            {"action":"like"}
            {"action":"dislike"}
            {} //any other action the get the result
          */
          const AWS = require("aws-sdk");
          const docClient = new AWS.DynamoDB.DocumentClient();      
          const mainId = 10;
          const tableName = '${dynamoDbTableName}';
          exports.handler = async (event) => {             
              let isLikeAction = event.action === "like";
              let isDislikeAction = event.action === "dislike";              
              let currentLike = 0;
              let currentDislike = 0;              
              const params = {
                  TableName:tableName,
                  Key: {"id":mainId}
              };              
              const dbResponse = await docClient.get(params).promise();    
              if (dbResponse.Item) {
                  currentLike = dbResponse.Item.like;
                  currentDislike = dbResponse.Item.dislike;
              }              
              if(isLikeAction) currentLike++;
              if(isDislikeAction) currentDislike++;
              await putItem(mainId,currentLike, currentDislike);              
              return {
                  like:currentLike,
                  dislike:currentDislike
              }
          }
          async function putItem(id,like,dislike) {
              const params = {
                  TableName:'${dynamoDbTableName}',
                  Item: {
                      "id": id,            
                      "dislike": dislike,   
                      "like": like,   
                  }
              };
              await docClient.put(params).promise();
          }              
  
  likeTable:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 0
        WriteCapacityUnits: 0
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      TableName: !Ref dynamoDbTableName
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      Tags:
        - Key: project
          Value: api-gateway-course
        - Key: created
          Value: generated

  accessToApiPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction     
      FunctionName: !Ref likeFunctionName
      Principal: apigateway.amazonaws.com            
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${likeApi}/*
    DependsOn:
      - likeLambdaFunction      

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${likeApi}.execute-api.${AWS::Region}.amazonaws.com/develop
  tableArn:
    Value: !GetAtt likeTable.Arn